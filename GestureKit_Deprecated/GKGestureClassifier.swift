//
//  GKGestureClassifier.swift
//  Slider
//
//  Created by Jieyi Hu on 7/11/15.
//  Copyright Â© 2015 SenseWatch. All rights reserved.
//

import UIKit
import CoreMotion
    
struct GKGestureClassifier {
    
    var patterns : [GKGesturePattern]
    var searchRange : Int
    var threshold : Double
    var length : Int {
        if patterns.dimensionAligned() {
            return patterns[patterns.startIndex].length
        } else {
            return 0
        }
    }
    var width : Int {
        if patterns.dimensionAligned() {
            return patterns[patterns.startIndex].width
        } else {
            return 0
        }
    }
    func classify(testCase : GKGesturePattern?) -> GKGesture? {
        if let testCase = testCase {
            return patterns.classify(withTestCase: testCase, withSearchRange: searchRange, withThreshold: threshold)
        } else {
            return nil
        }
    }
    
    static var UpDownLeftRight : GKGestureClassifier {
        get{
            return GKGestureClassifier(patterns: [GKGesturePattern.Up,GKGesturePattern.Down,GKGesturePattern.Left,GKGesturePattern.Right], searchRange: 5, threshold: 220.0)
        }
    }

    
    static var UpDownLeftRightPush : GKGestureClassifier {
        get{
            return GKGestureClassifier(patterns: [GKGesturePattern.Up,GKGesturePattern.Down,GKGesturePattern.Left,GKGesturePattern.Right,GKGesturePattern.Push], searchRange: 5, threshold: 220.0)
        }
    }
}


//  extension [GKGesturePattern]
extension CollectionType where Generator.Element == GKGesturePattern {
    func dimensionAligned() -> Bool {
        for index in startIndex..<endIndex {
            if !self[index].dimensionAligned(withPattern: self[startIndex]) {
                return false
            }
            //  checked current pattern
        }
        //  checked all patterns
        return true
    }
    func classify(withTestCase testCase : GKGesturePattern?, withSearchRange range : Int, withThreshold threshold : Double) -> GKGesture? {
        if let testCase = testCase {
            //  not nil
            if self.count > 0 && range >= 0 && threshold >= 0.0 {
                if testCase.dimensionAligned(withPattern: self[startIndex]) {
                    var minCost = DBL_MAX
                    var name : String? = nil
                    for pattern in self {
                        let cost = testCase.cost(withComparingPattern: pattern, usingSearchRange: range)
                        print("comparing to Gesture\(pattern.name), cost: \(cost)")
                        if cost < minCost {
                            minCost = cost
                            name = pattern.name
                        }
                    }
                    return minCost <= threshold ? GKGesture(rawValue: name!) : nil
                } else {
                    print("Test case \(testCase) is not aligned with patterns \(self)")
                    return nil
                }
            } else {
                print("\(self) is given invalid argument: (patterns, searchRange, threshold) = (\(self), \(range), \(threshold))")
                return nil
            }
        } else {
            return nil
        }
    }
}


extension GKGesturePattern {
    static var Up : GKGesturePattern {
        get{
            return GKGesturePattern(name: GKGesture.Up.rawValue, dataSet: [[-0.673981,0.688675,0.158371],[-0.671173,0.701218,0.135941],[-0.667068,0.728745,0.093048],[-0.663193,0.728165,0.058258],[-0.657578,0.708954,0.064911],[-0.661118,0.725342,0.092972],[-0.671738,0.752029,0.07515],[-0.665771,0.749878,0.095169],[-0.671143,0.738846,0.067703],[-0.667648,0.732971,0.06665],[-0.66861,0.727646,0.058289],[-0.6745,0.728912,0.074493],[-0.674606,0.732819,0.032425],[-0.661316,0.733856,0.03331],[-0.662643,0.715225,0.028275],[-0.668823,0.693909,0.041855],[-0.669525,0.714645,0.033218],[-0.652298,0.717636,0.037033],[-0.646973,0.72522,0.020905],[-0.647125,0.744354,0.024002],[-0.645615,0.740891,0.025909],[-0.650375,0.722656,0.029221],[-0.63562,0.769501,-0.022385],[-0.627838,0.805237,0.084076],[-0.734268,0.727646,0.253616],[-0.777145,0.509903,0.27713],[-0.666824,0.414551,0.32402],[-0.538376,0.46431,0.459579],[-0.474197,0.534897,0.594315],[-0.475494,0.822571,0.720505],[-0.479828,1.145569,0.716797],[-0.40596,1.454407,0.559647],[-0.309387,1.307739,0.39325],[-0.357849,1.019714,0.008926],[-0.439102,0.810349,0.103775],[-0.361526,1.029831,-0.062424],[-0.27771,1.121475,-0.134766],[-0.387939,1.100067,-0.157623],[-0.515625,1.065231,-0.085983],[-0.55368,0.973633,-0.043365],[-0.534851,0.92366,0.039307],[-0.525101,0.898193,0.124222],[-0.525955,0.845169,0.207504],[-0.536591,0.777222,0.25795],[-0.554382,0.740524,0.323883],[-0.578369,0.724152,0.32637],[-0.586578,0.699783,0.303223],[-0.594986,0.696625,0.274368],[-0.608017,0.714111,0.243271],[-0.597885,0.735977,0.226242],[-0.598938,0.740067,0.211594],[-0.611145,0.726288,0.207169],[-0.623901,0.719345,0.207703],[-0.622925,0.728363,0.237625],[-0.628494,0.742233,0.225052],[-0.62468,0.756027,0.223663],[-0.630722,0.770279,0.221375],[-0.640884,0.796234,0.182007],[-0.638626,0.765198,0.188599],[-0.647446,0.756897,0.179779],[-0.660324,0.705917,0.161346],[-0.676636,0.698563,0.107071],[-0.655441,0.685562,0.047073],[-0.631363,0.690247,0.033234],[-0.63028,0.684586,0.056671],[-0.642654,0.695557,0.082321],[-0.635071,0.727234,0.065872],[-0.61615,0.763535,0.080719],[-0.621094,0.780426,0.152359],[-0.654068,0.774017,0.14032]].map({numbers in numbers.map({number in round(number / 0.1)})}))
        }
    }
    static var Down : GKGesturePattern {
        get{
            return GKGesturePattern(name: GKGesture.Down.rawValue, dataSet: [[-0.640213,0.693512,0.313843],[-0.634964,0.656158,0.316437],[-0.618423,0.682236,0.321426],[-0.614746,0.715973,0.339294],[-0.60437,0.718201,0.365189],[-0.600708,0.695511,0.372803],[-0.60173,0.705566,0.396881],[-0.604782,0.717285,0.403854],[-0.595016,0.728561,0.40976],[-0.586792,0.745834,0.407379],[-0.57988,0.744446,0.403412],[-0.565994,0.734177,0.404205],[-0.556198,0.735931,0.382599],[-0.552353,0.739807,0.344421],[-0.54361,0.752243,0.334656],[-0.5327,0.789215,0.286423],[-0.517273,0.820663,0.249832],[-0.504898,0.863815,0.219742],[-0.486496,0.940903,0.146301],[-0.465836,1.040176,0.068634],[-0.427704,1.102844,0.198593],[-0.341339,1.176361,0.345917],[-0.366302,1.243073,0.482742],[-0.534592,1.106949,0.762909],[-0.729645,1.037979,1.272934],[-1.124603,0.436905,1.221512],[-1.376236,-0.058472,-0.197937],[-0.315979,0.055466,-1.876678],[0.912979,1.187943,-1.326752],[0.500854,1.432037,-0.276505],[-0.947647,1.097061,0.409454],[-1.234863,0.619339,0.3181],[-0.783066,0.729721,-0.000565],[-0.757568,0.796921,-0.021255],[-0.645309,0.680832,0.168381],[-0.525681,0.704956,0.217636],[-0.454468,0.756088,0.069183],[-0.512054,0.740463,0.033737],[-0.637009,0.664917,0.054123],[-0.700455,0.651306,0.057907],[-0.722641,0.699356,0.015366],[-0.703445,0.700958,0.01181],[-0.707855,0.699356,0.021133],[-0.703033,0.712204,0.017288],[-0.722916,0.733627,0.026917],[-0.711548,0.723679,-0.001633],[-0.692261,0.707932,-0.036163],[-0.698578,0.761078,0.001007],[-0.685211,0.750076,-0.021194],[-0.659348,0.720352,-0.033859],[-0.673523,0.704178,-0.044174],[-0.70166,0.709946,-0.044403],[-0.718384,0.709259,-0.034012],[-0.719025,0.722656,-0.046631],[-0.710678,0.721481,-0.069214],[-0.699371,0.71933,-0.092331],[-0.686523,0.713623,-0.105194],[-0.683731,0.728973,-0.113907],[-0.692978,0.727356,-0.059509],[-0.688797,0.699905,-0.065628],[-0.657715,0.683914,-0.117889],[-0.649979,0.68808,-0.180573],[-0.670807,0.725189,-0.077316],[-0.667938,0.694443,-0.006104],[-0.661118,0.644485,-0.020752],[-0.649048,0.663223,-0.065247],[-0.648788,0.7005,-0.01207],[-0.658844,0.676895,0.028915],[-0.648575,0.695145,0.072571],[-0.637024,0.733673,0.106079]].map({numbers in numbers.map({number in round(number / 0.1)})}))
        }
    }
    static var Left : GKGesturePattern {
        get{
            return GKGesturePattern(name: GKGesture.Left.rawValue, dataSet: [[-0.847046,0.120331,-0.448578],[-0.856491,0.131012,-0.441574],[-0.856995,0.127792,-0.461182],[-0.867691,0.116196,-0.439163],[-0.876373,0.098251,-0.421127],[-0.887558,0.087555,-0.392242],[-0.883865,0.061035,-0.391998],[-0.880447,0.062592,-0.398865],[-0.882523,0.072037,-0.408569],[-0.891663,0.052078,-0.386139],[-0.885681,0.047546,-0.373978],[-0.88147,0.021225,-0.347305],[-0.86937,-0.004074,-0.320663],[-0.874298,-0.001236,-0.312775],[-0.862717,0.024445,-0.319016],[-0.872559,0.027176,-0.30423],[-0.876633,-0.004272,-0.260406],[-0.859512,-0.031494,-0.191711],[-0.834717,-0.09581,-0.143463],[-0.801941,-0.122223,-0.140976],[-0.716431,-0.10939,-0.198792],[-0.648651,-0.049408,-0.30455],[-0.585953,-0.047455,-0.231064],[-0.412003,0.059799,-0.522278],[-0.208496,0.274033,-1.096298],[-0.207565,0.631531,-1.283859],[-0.325226,0.706451,-1.12915],[-0.275711,0.465042,-0.567978],[0.006668,0.465256,-0.554382],[-0.308609,0.665359,-0.872086],[-0.995621,0.745148,-1.050964],[-0.267731,0.832367,-1.15596],[-0.106628,0.930405,-1.238602],[-0.20578,0.764297,-1.286224],[-0.189331,0.628799,-1.295761],[-0.108612,0.589066,-1.269257],[-0.226578,0.581268,-1.147034],[-0.31604,0.425049,-0.97287],[-0.289505,0.295822,-0.83165],[-0.233597,0.281265,-0.780289],[-0.240997,0.338287,-0.783203],[-0.282776,0.378098,-0.801178],[-0.320419,0.397186,-0.809555],[-0.328461,0.417252,-0.80542],[-0.302612,0.445023,-0.816147],[-0.285202,0.479202,-0.831665],[-0.288116,0.47522,-0.828735],[-0.31221,0.465439,-0.842834],[-0.314407,0.487778,-0.863693],[-0.317795,0.481796,-0.857849],[-0.320618,0.466949,-0.851089],[-0.307556,0.495987,-0.848007],[-0.314331,0.48494,-0.829453],[-0.323532,0.46814,-0.825104],[-0.31665,0.469193,-0.829071],[-0.316696,0.474106,-0.828537],[-0.343872,0.480484,-0.839554],[-0.346863,0.48204,-0.847839],[-0.337936,0.474747,-0.851883],[-0.335815,0.457611,-0.856934],[-0.340378,0.472321,-0.855789],[-0.35022,0.474976,-0.833664],[-0.374405,0.483994,-0.813843],[-0.388306,0.49614,-0.806778],[-0.396439,0.520844,-0.822678],[-0.402542,0.537811,-0.847458],[-0.406967,0.533539,-0.863617],[-0.409851,0.527496,-0.851898],[-0.404114,0.497742,-0.825745],[-0.427322,0.508667,-0.800522]].map({numbers in numbers.map({number in round(number / 0.1)})}))
        }
    }
    static var Right : GKGesturePattern {
        get{
            return GKGesturePattern(name: GKGesture.Right.rawValue, dataSet: [[-0.723083,0.677551,-0.058716],[-0.725479,0.664536,-0.082794],[-0.731842,0.659576,-0.082779],[-0.72081,0.638504,-0.084015],[-0.725266,0.634827,-0.108978],[-0.736923,0.672546,-0.101242],[-0.752213,0.675385,-0.098663],[-0.740128,0.645432,-0.096054],[-0.737549,0.634995,-0.0849],[-0.749634,0.664032,-0.092407],[-0.754974,0.657898,-0.073318],[-0.763931,0.619171,-0.042236],[-0.757812,0.597458,-0.033157],[-0.755249,0.640793,-0.038208],[-0.765396,0.678391,-0.019714],[-0.759323,0.661636,-0.012558],[-0.750687,0.634033,-0.002075],[-0.752609,0.636612,0.030746],[-0.751266,0.664948,0.091187],[-0.703079,0.676468,0.093369],[-0.623993,0.737534,-0.016357],[-0.642639,0.775787,-0.061447],[-0.710251,0.518188,-0.269135],[-0.65564,0.218155,-0.410522],[-0.67717,0.228989,-0.018616],[-0.765442,0.706406,0.607635],[-0.816071,1.346252,0.784042],[-0.489594,1.457703,0.132889],[-0.243088,1.191864,-0.261734],[-0.362427,0.968903,-0.558853],[-0.470932,0.941345,-0.736969],[-0.48349,0.911835,-0.742004],[-0.467117,0.87114,-0.609299],[-0.466476,0.836304,-0.436768],[-0.53511,0.829834,-0.279648],[-0.606186,0.818481,-0.127945],[-0.635544,0.820953,-0.007278],[-0.641937,0.830215,0.040802],[-0.666718,0.84581,0.042587],[-0.685135,0.81366,0.052246],[-0.679016,0.735458,0.058426],[-0.669769,0.693161,0.064865],[-0.662308,0.683975,0.053482],[-0.663101,0.715561,0.04248],[-0.669235,0.738281,0.029984],[-0.667862,0.743057,-0.000809],[-0.668335,0.739212,-0.009171],[-0.671783,0.737274,-0.014053],[-0.674667,0.733154,0.002563],[-0.677612,0.729324,-0.009186],[-0.677094,0.726868,-0.007736],[-0.682205,0.745132,-0.017822],[-0.691101,0.745682,-0.026566],[-0.681412,0.708405,-0.029877],[-0.683868,0.70694,-0.03183],[-0.692139,0.690903,-0.051971],[-0.706375,0.683502,-0.055847],[-0.708725,0.662735,-0.091248],[-0.689651,0.667404,-0.150101],[-0.687912,0.687347,-0.174911],[-0.688995,0.696808,-0.186584],[-0.686707,0.720657,-0.163391],[-0.680359,0.730392,-0.151611],[-0.691849,0.749466,-0.147461],[-0.695755,0.746384,-0.137177],[-0.701569,0.742996,-0.099457],[-0.696671,0.741791,-0.122513],[-0.694611,0.735229,-0.105453],[-0.701019,0.679657,-0.106339],[-0.709274,0.667694,-0.095123]].map({numbers in numbers.map({number in round(number / 0.1)})}))
        }
    }
    static var Push : GKGesturePattern {
        get{
            return GKGesturePattern(name: GKGesture.Push.rawValue, dataSet: [[Double]]())
        }
    }
}